// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: game/joker/v1alpha1/joker.proto

package jokerv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GameLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GameLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameLoginRequestMultiError, or nil if none found.
func (m *GameLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GameLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for GameCode

	// no validation rules for IsMobile

	if m.Token != nil {
		// no validation rules for Token
	}

	if m.RedirectUrl != nil {
		// no validation rules for RedirectUrl
	}

	if m.Ip != nil {
		// no validation rules for Ip
	}

	if m.UserAgent != nil {
		// no validation rules for UserAgent
	}

	if len(errors) > 0 {
		return GameLoginRequestMultiError(errors)
	}

	return nil
}

// GameLoginRequestMultiError is an error wrapping multiple validation errors
// returned by GameLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type GameLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameLoginRequestMultiError) AllErrors() []error { return m }

// GameLoginRequestValidationError is the validation error returned by
// GameLoginRequest.Validate if the designated constraints aren't met.
type GameLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameLoginRequestValidationError) ErrorName() string { return "GameLoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e GameLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameLoginRequestValidationError{}

// Validate checks the field values on GameLoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GameLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameLoginResponseMultiError, or nil if none found.
func (m *GameLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GameLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsSuccess

	// no validation rules for Token

	// no validation rules for Url

	if len(errors) > 0 {
		return GameLoginResponseMultiError(errors)
	}

	return nil
}

// GameLoginResponseMultiError is an error wrapping multiple validation errors
// returned by GameLoginResponse.ValidateAll() if the designated constraints
// aren't met.
type GameLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameLoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameLoginResponseMultiError) AllErrors() []error { return m }

// GameLoginResponseValidationError is the validation error returned by
// GameLoginResponse.Validate if the designated constraints aren't met.
type GameLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameLoginResponseValidationError) ErrorName() string {
	return "GameLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GameLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameLoginResponseValidationError{}

// Validate checks the field values on GetGameListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameListRequestMultiError, or nil if none found.
func (m *GetGameListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if m.Query != nil {
		// no validation rules for Query
	}

	if len(errors) > 0 {
		return GetGameListRequestMultiError(errors)
	}

	return nil
}

// GetGameListRequestMultiError is an error wrapping multiple validation errors
// returned by GetGameListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGameListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameListRequestMultiError) AllErrors() []error { return m }

// GetGameListRequestValidationError is the validation error returned by
// GetGameListRequest.Validate if the designated constraints aren't met.
type GetGameListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameListRequestValidationError) ErrorName() string {
	return "GetGameListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameListRequestValidationError{}

// Validate checks the field values on GetGameListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameListResponseMultiError, or nil if none found.
func (m *GetGameListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGames() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGameListResponseValidationError{
						field:  fmt.Sprintf("Games[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGameListResponseValidationError{
						field:  fmt.Sprintf("Games[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGameListResponseValidationError{
					field:  fmt.Sprintf("Games[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return GetGameListResponseMultiError(errors)
	}

	return nil
}

// GetGameListResponseMultiError is an error wrapping multiple validation
// errors returned by GetGameListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGameListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameListResponseMultiError) AllErrors() []error { return m }

// GetGameListResponseValidationError is the validation error returned by
// GetGameListResponse.Validate if the designated constraints aren't met.
type GetGameListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameListResponseValidationError) ErrorName() string {
	return "GetGameListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameListResponseValidationError{}

// Validate checks the field values on GetGameRoundStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameRoundStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameRoundStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameRoundStatusRequestMultiError, or nil if none found.
func (m *GetGameRoundStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameRoundStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoundId

	if len(errors) > 0 {
		return GetGameRoundStatusRequestMultiError(errors)
	}

	return nil
}

// GetGameRoundStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetGameRoundStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type GetGameRoundStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameRoundStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameRoundStatusRequestMultiError) AllErrors() []error { return m }

// GetGameRoundStatusRequestValidationError is the validation error returned by
// GetGameRoundStatusRequest.Validate if the designated constraints aren't met.
type GetGameRoundStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameRoundStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameRoundStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameRoundStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameRoundStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameRoundStatusRequestValidationError) ErrorName() string {
	return "GetGameRoundStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameRoundStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameRoundStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameRoundStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameRoundStatusRequestValidationError{}

// Validate checks the field values on GetGameRoundStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameRoundStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameRoundStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameRoundStatusResponseMultiError, or nil if none found.
func (m *GetGameRoundStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameRoundStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Amount

	if len(errors) > 0 {
		return GetGameRoundStatusResponseMultiError(errors)
	}

	return nil
}

// GetGameRoundStatusResponseMultiError is an error wrapping multiple
// validation errors returned by GetGameRoundStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type GetGameRoundStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameRoundStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameRoundStatusResponseMultiError) AllErrors() []error { return m }

// GetGameRoundStatusResponseValidationError is the validation error returned
// by GetGameRoundStatusResponse.Validate if the designated constraints aren't met.
type GetGameRoundStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameRoundStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameRoundStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameRoundStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameRoundStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameRoundStatusResponseValidationError) ErrorName() string {
	return "GetGameRoundStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameRoundStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameRoundStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameRoundStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameRoundStatusResponseValidationError{}

// Validate checks the field values on GetGameDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameDetailRequestMultiError, or nil if none found.
func (m *GetGameDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoundId

	if len(errors) > 0 {
		return GetGameDetailRequestMultiError(errors)
	}

	return nil
}

// GetGameDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetGameDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGameDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameDetailRequestMultiError) AllErrors() []error { return m }

// GetGameDetailRequestValidationError is the validation error returned by
// GetGameDetailRequest.Validate if the designated constraints aren't met.
type GetGameDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameDetailRequestValidationError) ErrorName() string {
	return "GetGameDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameDetailRequestValidationError{}

// Validate checks the field values on GetGameDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameDetailResponseMultiError, or nil if none found.
func (m *GetGameDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsSuccess

	if m.Url != nil {
		// no validation rules for Url
	}

	if len(errors) > 0 {
		return GetGameDetailResponseMultiError(errors)
	}

	return nil
}

// GetGameDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetGameDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGameDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameDetailResponseMultiError) AllErrors() []error { return m }

// GetGameDetailResponseValidationError is the validation error returned by
// GetGameDetailResponse.Validate if the designated constraints aren't met.
type GetGameDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameDetailResponseValidationError) ErrorName() string {
	return "GetGameDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameDetailResponseValidationError{}

// Validate checks the field values on GameSignoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GameSignoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameSignoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameSignoutRequestMultiError, or nil if none found.
func (m *GameSignoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GameSignoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return GameSignoutRequestMultiError(errors)
	}

	return nil
}

// GameSignoutRequestMultiError is an error wrapping multiple validation errors
// returned by GameSignoutRequest.ValidateAll() if the designated constraints
// aren't met.
type GameSignoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameSignoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameSignoutRequestMultiError) AllErrors() []error { return m }

// GameSignoutRequestValidationError is the validation error returned by
// GameSignoutRequest.Validate if the designated constraints aren't met.
type GameSignoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameSignoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameSignoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameSignoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameSignoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameSignoutRequestValidationError) ErrorName() string {
	return "GameSignoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GameSignoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameSignoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameSignoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameSignoutRequestValidationError{}

// Validate checks the field values on GameSignoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GameSignoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameSignoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameSignoutResponseMultiError, or nil if none found.
func (m *GameSignoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GameSignoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsSuccess

	if len(errors) > 0 {
		return GameSignoutResponseMultiError(errors)
	}

	return nil
}

// GameSignoutResponseMultiError is an error wrapping multiple validation
// errors returned by GameSignoutResponse.ValidateAll() if the designated
// constraints aren't met.
type GameSignoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameSignoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameSignoutResponseMultiError) AllErrors() []error { return m }

// GameSignoutResponseValidationError is the validation error returned by
// GameSignoutResponse.Validate if the designated constraints aren't met.
type GameSignoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameSignoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameSignoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameSignoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameSignoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameSignoutResponseValidationError) ErrorName() string {
	return "GameSignoutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GameSignoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameSignoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameSignoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameSignoutResponseValidationError{}
