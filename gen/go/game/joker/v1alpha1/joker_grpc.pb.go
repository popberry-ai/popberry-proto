// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: game/joker/v1alpha1/joker.proto

package jokerv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JokerService_GameLogin_FullMethodName          = "/game.joker.v1alpha1.JokerService/GameLogin"
	JokerService_GetGameList_FullMethodName        = "/game.joker.v1alpha1.JokerService/GetGameList"
	JokerService_GetGameRoundStatus_FullMethodName = "/game.joker.v1alpha1.JokerService/GetGameRoundStatus"
	JokerService_GetGameDetail_FullMethodName      = "/game.joker.v1alpha1.JokerService/GetGameDetail"
	JokerService_GameSignout_FullMethodName        = "/game.joker.v1alpha1.JokerService/GameSignout"
)

// JokerServiceClient is the client API for JokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// JokerService defines the service for handling Joker game operations.
type JokerServiceClient interface {
	// GameLogin allows a user to log in to the game.
	GameLogin(ctx context.Context, in *GameLoginRequest, opts ...grpc.CallOption) (*GameLoginResponse, error)
	// GetGameList retrieves a list of available games.
	GetGameList(ctx context.Context, in *GetGameListRequest, opts ...grpc.CallOption) (*GetGameListResponse, error)
	// GetGameRoundStatus retrieves the status of a specific game round.
	GetGameRoundStatus(ctx context.Context, in *GetGameRoundStatusRequest, opts ...grpc.CallOption) (*GetGameRoundStatusResponse, error)
	// GetGameDetail retrieves detailed information about a specific game round.
	GetGameDetail(ctx context.Context, in *GetGameDetailRequest, opts ...grpc.CallOption) (*GetGameDetailResponse, error)
	// GameSignout allows a user to sign out from the game.
	GameSignout(ctx context.Context, in *GameSignoutRequest, opts ...grpc.CallOption) (*GameSignoutResponse, error)
}

type jokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJokerServiceClient(cc grpc.ClientConnInterface) JokerServiceClient {
	return &jokerServiceClient{cc}
}

func (c *jokerServiceClient) GameLogin(ctx context.Context, in *GameLoginRequest, opts ...grpc.CallOption) (*GameLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameLoginResponse)
	err := c.cc.Invoke(ctx, JokerService_GameLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jokerServiceClient) GetGameList(ctx context.Context, in *GetGameListRequest, opts ...grpc.CallOption) (*GetGameListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameListResponse)
	err := c.cc.Invoke(ctx, JokerService_GetGameList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jokerServiceClient) GetGameRoundStatus(ctx context.Context, in *GetGameRoundStatusRequest, opts ...grpc.CallOption) (*GetGameRoundStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameRoundStatusResponse)
	err := c.cc.Invoke(ctx, JokerService_GetGameRoundStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jokerServiceClient) GetGameDetail(ctx context.Context, in *GetGameDetailRequest, opts ...grpc.CallOption) (*GetGameDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameDetailResponse)
	err := c.cc.Invoke(ctx, JokerService_GetGameDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jokerServiceClient) GameSignout(ctx context.Context, in *GameSignoutRequest, opts ...grpc.CallOption) (*GameSignoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameSignoutResponse)
	err := c.cc.Invoke(ctx, JokerService_GameSignout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JokerServiceServer is the server API for JokerService service.
// All implementations must embed UnimplementedJokerServiceServer
// for forward compatibility.
//
// JokerService defines the service for handling Joker game operations.
type JokerServiceServer interface {
	// GameLogin allows a user to log in to the game.
	GameLogin(context.Context, *GameLoginRequest) (*GameLoginResponse, error)
	// GetGameList retrieves a list of available games.
	GetGameList(context.Context, *GetGameListRequest) (*GetGameListResponse, error)
	// GetGameRoundStatus retrieves the status of a specific game round.
	GetGameRoundStatus(context.Context, *GetGameRoundStatusRequest) (*GetGameRoundStatusResponse, error)
	// GetGameDetail retrieves detailed information about a specific game round.
	GetGameDetail(context.Context, *GetGameDetailRequest) (*GetGameDetailResponse, error)
	// GameSignout allows a user to sign out from the game.
	GameSignout(context.Context, *GameSignoutRequest) (*GameSignoutResponse, error)
	mustEmbedUnimplementedJokerServiceServer()
}

// UnimplementedJokerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJokerServiceServer struct{}

func (UnimplementedJokerServiceServer) GameLogin(context.Context, *GameLoginRequest) (*GameLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameLogin not implemented")
}
func (UnimplementedJokerServiceServer) GetGameList(context.Context, *GetGameListRequest) (*GetGameListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameList not implemented")
}
func (UnimplementedJokerServiceServer) GetGameRoundStatus(context.Context, *GetGameRoundStatusRequest) (*GetGameRoundStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameRoundStatus not implemented")
}
func (UnimplementedJokerServiceServer) GetGameDetail(context.Context, *GetGameDetailRequest) (*GetGameDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameDetail not implemented")
}
func (UnimplementedJokerServiceServer) GameSignout(context.Context, *GameSignoutRequest) (*GameSignoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameSignout not implemented")
}
func (UnimplementedJokerServiceServer) mustEmbedUnimplementedJokerServiceServer() {}
func (UnimplementedJokerServiceServer) testEmbeddedByValue()                      {}

// UnsafeJokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JokerServiceServer will
// result in compilation errors.
type UnsafeJokerServiceServer interface {
	mustEmbedUnimplementedJokerServiceServer()
}

func RegisterJokerServiceServer(s grpc.ServiceRegistrar, srv JokerServiceServer) {
	// If the following call pancis, it indicates UnimplementedJokerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JokerService_ServiceDesc, srv)
}

func _JokerService_GameLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokerServiceServer).GameLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JokerService_GameLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokerServiceServer).GameLogin(ctx, req.(*GameLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JokerService_GetGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokerServiceServer).GetGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JokerService_GetGameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokerServiceServer).GetGameList(ctx, req.(*GetGameListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JokerService_GetGameRoundStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRoundStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokerServiceServer).GetGameRoundStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JokerService_GetGameRoundStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokerServiceServer).GetGameRoundStatus(ctx, req.(*GetGameRoundStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JokerService_GetGameDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokerServiceServer).GetGameDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JokerService_GetGameDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokerServiceServer).GetGameDetail(ctx, req.(*GetGameDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JokerService_GameSignout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSignoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokerServiceServer).GameSignout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JokerService_GameSignout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokerServiceServer).GameSignout(ctx, req.(*GameSignoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JokerService_ServiceDesc is the grpc.ServiceDesc for JokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.joker.v1alpha1.JokerService",
	HandlerType: (*JokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GameLogin",
			Handler:    _JokerService_GameLogin_Handler,
		},
		{
			MethodName: "GetGameList",
			Handler:    _JokerService_GetGameList_Handler,
		},
		{
			MethodName: "GetGameRoundStatus",
			Handler:    _JokerService_GetGameRoundStatus_Handler,
		},
		{
			MethodName: "GetGameDetail",
			Handler:    _JokerService_GetGameDetail_Handler,
		},
		{
			MethodName: "GameSignout",
			Handler:    _JokerService_GameSignout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/joker/v1alpha1/joker.proto",
}
