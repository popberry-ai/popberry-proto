// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bff/bridgr/config/v1alpha1/service.proto

package configv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterDeviceRequestMultiError, or nil if none found.
func (m *RegisterDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	// no validation rules for DeviceName

	// no validation rules for DeviceModel

	if len(errors) > 0 {
		return RegisterDeviceRequestMultiError(errors)
	}

	return nil
}

// RegisterDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterDeviceRequestMultiError) AllErrors() []error { return m }

// RegisterDeviceRequestValidationError is the validation error returned by
// RegisterDeviceRequest.Validate if the designated constraints aren't met.
type RegisterDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterDeviceRequestValidationError) ErrorName() string {
	return "RegisterDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterDeviceRequestValidationError{}

// Validate checks the field values on RegisterDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterDeviceResponseMultiError, or nil if none found.
func (m *RegisterDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	// no validation rules for Role

	if len(errors) > 0 {
		return RegisterDeviceResponseMultiError(errors)
	}

	return nil
}

// RegisterDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterDeviceResponseMultiError) AllErrors() []error { return m }

// RegisterDeviceResponseValidationError is the validation error returned by
// RegisterDeviceResponse.Validate if the designated constraints aren't met.
type RegisterDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterDeviceResponseValidationError) ErrorName() string {
	return "RegisterDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterDeviceResponseValidationError{}

// Validate checks the field values on VerifyDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyDeviceRequestMultiError, or nil if none found.
func (m *VerifyDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return VerifyDeviceRequestMultiError(errors)
	}

	return nil
}

// VerifyDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by VerifyDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type VerifyDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyDeviceRequestMultiError) AllErrors() []error { return m }

// VerifyDeviceRequestValidationError is the validation error returned by
// VerifyDeviceRequest.Validate if the designated constraints aren't met.
type VerifyDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyDeviceRequestValidationError) ErrorName() string {
	return "VerifyDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyDeviceRequestValidationError{}

// Validate checks the field values on VerifyDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyDeviceResponseMultiError, or nil if none found.
func (m *VerifyDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsValid

	if len(errors) > 0 {
		return VerifyDeviceResponseMultiError(errors)
	}

	return nil
}

// VerifyDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by VerifyDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type VerifyDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyDeviceResponseMultiError) AllErrors() []error { return m }

// VerifyDeviceResponseValidationError is the validation error returned by
// VerifyDeviceResponse.Validate if the designated constraints aren't met.
type VerifyDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyDeviceResponseValidationError) ErrorName() string {
	return "VerifyDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyDeviceResponseValidationError{}

// Validate checks the field values on AssignDeviceGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignDeviceGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignDeviceGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignDeviceGroupRequestMultiError, or nil if none found.
func (m *AssignDeviceGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignDeviceGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	// no validation rules for GroupName

	if len(errors) > 0 {
		return AssignDeviceGroupRequestMultiError(errors)
	}

	return nil
}

// AssignDeviceGroupRequestMultiError is an error wrapping multiple validation
// errors returned by AssignDeviceGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type AssignDeviceGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignDeviceGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignDeviceGroupRequestMultiError) AllErrors() []error { return m }

// AssignDeviceGroupRequestValidationError is the validation error returned by
// AssignDeviceGroupRequest.Validate if the designated constraints aren't met.
type AssignDeviceGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignDeviceGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignDeviceGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignDeviceGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignDeviceGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignDeviceGroupRequestValidationError) ErrorName() string {
	return "AssignDeviceGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignDeviceGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignDeviceGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignDeviceGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignDeviceGroupRequestValidationError{}

// Validate checks the field values on AssignDeviceGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignDeviceGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignDeviceGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignDeviceGroupResponseMultiError, or nil if none found.
func (m *AssignDeviceGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignDeviceGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return AssignDeviceGroupResponseMultiError(errors)
	}

	return nil
}

// AssignDeviceGroupResponseMultiError is an error wrapping multiple validation
// errors returned by AssignDeviceGroupResponse.ValidateAll() if the
// designated constraints aren't met.
type AssignDeviceGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignDeviceGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignDeviceGroupResponseMultiError) AllErrors() []error { return m }

// AssignDeviceGroupResponseValidationError is the validation error returned by
// AssignDeviceGroupResponse.Validate if the designated constraints aren't met.
type AssignDeviceGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignDeviceGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignDeviceGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignDeviceGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignDeviceGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignDeviceGroupResponseValidationError) ErrorName() string {
	return "AssignDeviceGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignDeviceGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignDeviceGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignDeviceGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignDeviceGroupResponseValidationError{}

// Validate checks the field values on UpdateForwardingRulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateForwardingRulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateForwardingRulesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateForwardingRulesResponseMultiError, or nil if none found.
func (m *UpdateForwardingRulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateForwardingRulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateForwardingRulesResponseMultiError(errors)
	}

	return nil
}

// UpdateForwardingRulesResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateForwardingRulesResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateForwardingRulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateForwardingRulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateForwardingRulesResponseMultiError) AllErrors() []error { return m }

// UpdateForwardingRulesResponseValidationError is the validation error
// returned by UpdateForwardingRulesResponse.Validate if the designated
// constraints aren't met.
type UpdateForwardingRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateForwardingRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateForwardingRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateForwardingRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateForwardingRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateForwardingRulesResponseValidationError) ErrorName() string {
	return "UpdateForwardingRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateForwardingRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateForwardingRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateForwardingRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateForwardingRulesResponseValidationError{}

// Validate checks the field values on UpdateConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigResponseMultiError, or nil if none found.
func (m *UpdateConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateConfigResponseMultiError(errors)
	}

	return nil
}

// UpdateConfigResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigResponseMultiError) AllErrors() []error { return m }

// UpdateConfigResponseValidationError is the validation error returned by
// UpdateConfigResponse.Validate if the designated constraints aren't met.
type UpdateConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigResponseValidationError) ErrorName() string {
	return "UpdateConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigResponseValidationError{}

// Validate checks the field values on UpdateForwardingRulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateForwardingRulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateForwardingRulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateForwardingRulesRequestMultiError, or nil if none found.
func (m *UpdateForwardingRulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateForwardingRulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return UpdateForwardingRulesRequestMultiError(errors)
	}

	return nil
}

// UpdateForwardingRulesRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateForwardingRulesRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateForwardingRulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateForwardingRulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateForwardingRulesRequestMultiError) AllErrors() []error { return m }

// UpdateForwardingRulesRequestValidationError is the validation error returned
// by UpdateForwardingRulesRequest.Validate if the designated constraints
// aren't met.
type UpdateForwardingRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateForwardingRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateForwardingRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateForwardingRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateForwardingRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateForwardingRulesRequestValidationError) ErrorName() string {
	return "UpdateForwardingRulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateForwardingRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateForwardingRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateForwardingRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateForwardingRulesRequestValidationError{}

// Validate checks the field values on GetForwardingRulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetForwardingRulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetForwardingRulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetForwardingRulesRequestMultiError, or nil if none found.
func (m *GetForwardingRulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetForwardingRulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return GetForwardingRulesRequestMultiError(errors)
	}

	return nil
}

// GetForwardingRulesRequestMultiError is an error wrapping multiple validation
// errors returned by GetForwardingRulesRequest.ValidateAll() if the
// designated constraints aren't met.
type GetForwardingRulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetForwardingRulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetForwardingRulesRequestMultiError) AllErrors() []error { return m }

// GetForwardingRulesRequestValidationError is the validation error returned by
// GetForwardingRulesRequest.Validate if the designated constraints aren't met.
type GetForwardingRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetForwardingRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetForwardingRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetForwardingRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetForwardingRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetForwardingRulesRequestValidationError) ErrorName() string {
	return "GetForwardingRulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetForwardingRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetForwardingRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetForwardingRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetForwardingRulesRequestValidationError{}

// Validate checks the field values on GetForwardingRulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetForwardingRulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetForwardingRulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetForwardingRulesResponseMultiError, or nil if none found.
func (m *GetForwardingRulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetForwardingRulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetForwardingRulesResponseMultiError(errors)
	}

	return nil
}

// GetForwardingRulesResponseMultiError is an error wrapping multiple
// validation errors returned by GetForwardingRulesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetForwardingRulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetForwardingRulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetForwardingRulesResponseMultiError) AllErrors() []error { return m }

// GetForwardingRulesResponseValidationError is the validation error returned
// by GetForwardingRulesResponse.Validate if the designated constraints aren't met.
type GetForwardingRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetForwardingRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetForwardingRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetForwardingRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetForwardingRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetForwardingRulesResponseValidationError) ErrorName() string {
	return "GetForwardingRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetForwardingRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetForwardingRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetForwardingRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetForwardingRulesResponseValidationError{}
