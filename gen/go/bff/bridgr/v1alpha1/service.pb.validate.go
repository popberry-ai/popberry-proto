// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bff/bridgr/v1alpha1/service.proto

package bridgrv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterDeviceRequestMultiError, or nil if none found.
func (m *RegisterDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MachineId

	// no validation rules for MachinePrefix

	// no validation rules for MachineName

	// no validation rules for AgentPrefix

	if len(errors) > 0 {
		return RegisterDeviceRequestMultiError(errors)
	}

	return nil
}

// RegisterDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterDeviceRequestMultiError) AllErrors() []error { return m }

// RegisterDeviceRequestValidationError is the validation error returned by
// RegisterDeviceRequest.Validate if the designated constraints aren't met.
type RegisterDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterDeviceRequestValidationError) ErrorName() string {
	return "RegisterDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterDeviceRequestValidationError{}

// Validate checks the field values on RegisterDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterDeviceResponseMultiError, or nil if none found.
func (m *RegisterDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceToken

	if len(errors) > 0 {
		return RegisterDeviceResponseMultiError(errors)
	}

	return nil
}

// RegisterDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterDeviceResponseMultiError) AllErrors() []error { return m }

// RegisterDeviceResponseValidationError is the validation error returned by
// RegisterDeviceResponse.Validate if the designated constraints aren't met.
type RegisterDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterDeviceResponseValidationError) ErrorName() string {
	return "RegisterDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterDeviceResponseValidationError{}

// Validate checks the field values on UnregisterDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnregisterDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterDeviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnregisterDeviceRequestMultiError, or nil if none found.
func (m *UnregisterDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceToken

	if len(errors) > 0 {
		return UnregisterDeviceRequestMultiError(errors)
	}

	return nil
}

// UnregisterDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by UnregisterDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type UnregisterDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterDeviceRequestMultiError) AllErrors() []error { return m }

// UnregisterDeviceRequestValidationError is the validation error returned by
// UnregisterDeviceRequest.Validate if the designated constraints aren't met.
type UnregisterDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterDeviceRequestValidationError) ErrorName() string {
	return "UnregisterDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterDeviceRequestValidationError{}

// Validate checks the field values on UnregisterDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnregisterDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterDeviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnregisterDeviceResponseMultiError, or nil if none found.
func (m *UnregisterDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UnregisterDeviceResponseMultiError(errors)
	}

	return nil
}

// UnregisterDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by UnregisterDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type UnregisterDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterDeviceResponseMultiError) AllErrors() []error { return m }

// UnregisterDeviceResponseValidationError is the validation error returned by
// UnregisterDeviceResponse.Validate if the designated constraints aren't met.
type UnregisterDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterDeviceResponseValidationError) ErrorName() string {
	return "UnregisterDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterDeviceResponseValidationError{}

// Validate checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckRequestMultiError, or nil if none found.
func (m *HealthCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceToken

	if len(errors) > 0 {
		return HealthCheckRequestMultiError(errors)
	}

	return nil
}

// HealthCheckRequestMultiError is an error wrapping multiple validation errors
// returned by HealthCheckRequest.ValidateAll() if the designated constraints
// aren't met.
type HealthCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckRequestMultiError) AllErrors() []error { return m }

// HealthCheckRequestValidationError is the validation error returned by
// HealthCheckRequest.Validate if the designated constraints aren't met.
type HealthCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckRequestValidationError) ErrorName() string {
	return "HealthCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckRequestValidationError{}

// Validate checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckResponseMultiError, or nil if none found.
func (m *HealthCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return HealthCheckResponseMultiError(errors)
	}

	return nil
}

// HealthCheckResponseMultiError is an error wrapping multiple validation
// errors returned by HealthCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type HealthCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckResponseMultiError) AllErrors() []error { return m }

// HealthCheckResponseValidationError is the validation error returned by
// HealthCheckResponse.Validate if the designated constraints aren't met.
type HealthCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckResponseValidationError) ErrorName() string {
	return "HealthCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckResponseValidationError{}

// Validate checks the field values on GetConfigRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigRequestMultiError, or nil if none found.
func (m *GetConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceToken

	if len(errors) > 0 {
		return GetConfigRequestMultiError(errors)
	}

	return nil
}

// GetConfigRequestMultiError is an error wrapping multiple validation errors
// returned by GetConfigRequest.ValidateAll() if the designated constraints
// aren't met.
type GetConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigRequestMultiError) AllErrors() []error { return m }

// GetConfigRequestValidationError is the validation error returned by
// GetConfigRequest.Validate if the designated constraints aren't met.
type GetConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigRequestValidationError) ErrorName() string { return "GetConfigRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigRequestValidationError{}

// Validate checks the field values on GetConfigResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigResponseMultiError, or nil if none found.
func (m *GetConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Config

	if len(errors) > 0 {
		return GetConfigResponseMultiError(errors)
	}

	return nil
}

// GetConfigResponseMultiError is an error wrapping multiple validation errors
// returned by GetConfigResponse.ValidateAll() if the designated constraints
// aren't met.
type GetConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigResponseMultiError) AllErrors() []error { return m }

// GetConfigResponseValidationError is the validation error returned by
// GetConfigResponse.Validate if the designated constraints aren't met.
type GetConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigResponseValidationError) ErrorName() string {
	return "GetConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigResponseValidationError{}

// Validate checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigRequestMultiError, or nil if none found.
func (m *UpdateConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceToken

	// no validation rules for Config

	if len(errors) > 0 {
		return UpdateConfigRequestMultiError(errors)
	}

	return nil
}

// UpdateConfigRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigRequestMultiError) AllErrors() []error { return m }

// UpdateConfigRequestValidationError is the validation error returned by
// UpdateConfigRequest.Validate if the designated constraints aren't met.
type UpdateConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigRequestValidationError) ErrorName() string {
	return "UpdateConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigRequestValidationError{}

// Validate checks the field values on UpdateConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigResponseMultiError, or nil if none found.
func (m *UpdateConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateConfigResponseMultiError(errors)
	}

	return nil
}

// UpdateConfigResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigResponseMultiError) AllErrors() []error { return m }

// UpdateConfigResponseValidationError is the validation error returned by
// UpdateConfigResponse.Validate if the designated constraints aren't met.
type UpdateConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigResponseValidationError) ErrorName() string {
	return "UpdateConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigResponseValidationError{}

// Validate checks the field values on ForwardSMSRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ForwardSMSRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardSMSRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardSMSRequestMultiError, or nil if none found.
func (m *ForwardSMSRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardSMSRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceToken

	// no validation rules for Recipient

	// no validation rules for Message

	if len(errors) > 0 {
		return ForwardSMSRequestMultiError(errors)
	}

	return nil
}

// ForwardSMSRequestMultiError is an error wrapping multiple validation errors
// returned by ForwardSMSRequest.ValidateAll() if the designated constraints
// aren't met.
type ForwardSMSRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardSMSRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardSMSRequestMultiError) AllErrors() []error { return m }

// ForwardSMSRequestValidationError is the validation error returned by
// ForwardSMSRequest.Validate if the designated constraints aren't met.
type ForwardSMSRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardSMSRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardSMSRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardSMSRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardSMSRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardSMSRequestValidationError) ErrorName() string {
	return "ForwardSMSRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardSMSRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardSMSRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardSMSRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardSMSRequestValidationError{}

// Validate checks the field values on ForwardSMSResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardSMSResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardSMSResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardSMSResponseMultiError, or nil if none found.
func (m *ForwardSMSResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardSMSResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for MessageId

	if len(errors) > 0 {
		return ForwardSMSResponseMultiError(errors)
	}

	return nil
}

// ForwardSMSResponseMultiError is an error wrapping multiple validation errors
// returned by ForwardSMSResponse.ValidateAll() if the designated constraints
// aren't met.
type ForwardSMSResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardSMSResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardSMSResponseMultiError) AllErrors() []error { return m }

// ForwardSMSResponseValidationError is the validation error returned by
// ForwardSMSResponse.Validate if the designated constraints aren't met.
type ForwardSMSResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardSMSResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardSMSResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardSMSResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardSMSResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardSMSResponseValidationError) ErrorName() string {
	return "ForwardSMSResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardSMSResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardSMSResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardSMSResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardSMSResponseValidationError{}

// Validate checks the field values on ForwardNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardNotificationRequestMultiError, or nil if none found.
func (m *ForwardNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceToken

	// no validation rules for Title

	// no validation rules for Body

	// no validation rules for Metadata

	if len(errors) > 0 {
		return ForwardNotificationRequestMultiError(errors)
	}

	return nil
}

// ForwardNotificationRequestMultiError is an error wrapping multiple
// validation errors returned by ForwardNotificationRequest.ValidateAll() if
// the designated constraints aren't met.
type ForwardNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardNotificationRequestMultiError) AllErrors() []error { return m }

// ForwardNotificationRequestValidationError is the validation error returned
// by ForwardNotificationRequest.Validate if the designated constraints aren't met.
type ForwardNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardNotificationRequestValidationError) ErrorName() string {
	return "ForwardNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardNotificationRequestValidationError{}

// Validate checks the field values on ForwardNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardNotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardNotificationResponseMultiError, or nil if none found.
func (m *ForwardNotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardNotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotificationId

	if len(errors) > 0 {
		return ForwardNotificationResponseMultiError(errors)
	}

	return nil
}

// ForwardNotificationResponseMultiError is an error wrapping multiple
// validation errors returned by ForwardNotificationResponse.ValidateAll() if
// the designated constraints aren't met.
type ForwardNotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardNotificationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardNotificationResponseMultiError) AllErrors() []error { return m }

// ForwardNotificationResponseValidationError is the validation error returned
// by ForwardNotificationResponse.Validate if the designated constraints
// aren't met.
type ForwardNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardNotificationResponseValidationError) ErrorName() string {
	return "ForwardNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardNotificationResponseValidationError{}

// Validate checks the field values on GetForwardingHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetForwardingHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetForwardingHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetForwardingHistoryRequestMultiError, or nil if none found.
func (m *GetForwardingHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetForwardingHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceToken

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetForwardingHistoryRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetForwardingHistoryRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetForwardingHistoryRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetForwardingHistoryRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetForwardingHistoryRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetForwardingHistoryRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetForwardingHistoryRequestMultiError(errors)
	}

	return nil
}

// GetForwardingHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by GetForwardingHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type GetForwardingHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetForwardingHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetForwardingHistoryRequestMultiError) AllErrors() []error { return m }

// GetForwardingHistoryRequestValidationError is the validation error returned
// by GetForwardingHistoryRequest.Validate if the designated constraints
// aren't met.
type GetForwardingHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetForwardingHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetForwardingHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetForwardingHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetForwardingHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetForwardingHistoryRequestValidationError) ErrorName() string {
	return "GetForwardingHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetForwardingHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetForwardingHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetForwardingHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetForwardingHistoryRequestValidationError{}

// Validate checks the field values on GetForwardingHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetForwardingHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetForwardingHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetForwardingHistoryResponseMultiError, or nil if none found.
func (m *GetForwardingHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetForwardingHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetForwardingHistoryResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetForwardingHistoryResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetForwardingHistoryResponseValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetForwardingHistoryResponseMultiError(errors)
	}

	return nil
}

// GetForwardingHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by GetForwardingHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type GetForwardingHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetForwardingHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetForwardingHistoryResponseMultiError) AllErrors() []error { return m }

// GetForwardingHistoryResponseValidationError is the validation error returned
// by GetForwardingHistoryResponse.Validate if the designated constraints
// aren't met.
type GetForwardingHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetForwardingHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetForwardingHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetForwardingHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetForwardingHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetForwardingHistoryResponseValidationError) ErrorName() string {
	return "GetForwardingHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetForwardingHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetForwardingHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetForwardingHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetForwardingHistoryResponseValidationError{}
