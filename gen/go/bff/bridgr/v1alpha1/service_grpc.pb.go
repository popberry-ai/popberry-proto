// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bff/bridgr/v1alpha1/service.proto

package bridgrv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BridgrService_RegisterDevice_FullMethodName       = "/bff.bridgr.v1alpha1.BridgrService/RegisterDevice"
	BridgrService_UnregisterDevice_FullMethodName     = "/bff.bridgr.v1alpha1.BridgrService/UnregisterDevice"
	BridgrService_HealthCheck_FullMethodName          = "/bff.bridgr.v1alpha1.BridgrService/HealthCheck"
	BridgrService_GetConfig_FullMethodName            = "/bff.bridgr.v1alpha1.BridgrService/GetConfig"
	BridgrService_UpdateConfig_FullMethodName         = "/bff.bridgr.v1alpha1.BridgrService/UpdateConfig"
	BridgrService_ForwardSMS_FullMethodName           = "/bff.bridgr.v1alpha1.BridgrService/ForwardSMS"
	BridgrService_ForwardNotification_FullMethodName  = "/bff.bridgr.v1alpha1.BridgrService/ForwardNotification"
	BridgrService_GetForwardingHistory_FullMethodName = "/bff.bridgr.v1alpha1.BridgrService/GetForwardingHistory"
)

// BridgrServiceClient is the client API for BridgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgrServiceClient interface {
	// Device management
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
	UnregisterDevice(ctx context.Context, in *UnregisterDeviceRequest, opts ...grpc.CallOption) (*UnregisterDeviceResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Configuration management
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
	// Forwarding services
	ForwardSMS(ctx context.Context, in *ForwardSMSRequest, opts ...grpc.CallOption) (*ForwardSMSResponse, error)
	ForwardNotification(ctx context.Context, in *ForwardNotificationRequest, opts ...grpc.CallOption) (*ForwardNotificationResponse, error)
	GetForwardingHistory(ctx context.Context, in *GetForwardingHistoryRequest, opts ...grpc.CallOption) (*GetForwardingHistoryResponse, error)
}

type bridgrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgrServiceClient(cc grpc.ClientConnInterface) BridgrServiceClient {
	return &bridgrServiceClient{cc}
}

func (c *bridgrServiceClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, BridgrService_RegisterDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgrServiceClient) UnregisterDevice(ctx context.Context, in *UnregisterDeviceRequest, opts ...grpc.CallOption) (*UnregisterDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterDeviceResponse)
	err := c.cc.Invoke(ctx, BridgrService_UnregisterDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgrServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, BridgrService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgrServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, BridgrService_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgrServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConfigResponse)
	err := c.cc.Invoke(ctx, BridgrService_UpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgrServiceClient) ForwardSMS(ctx context.Context, in *ForwardSMSRequest, opts ...grpc.CallOption) (*ForwardSMSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardSMSResponse)
	err := c.cc.Invoke(ctx, BridgrService_ForwardSMS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgrServiceClient) ForwardNotification(ctx context.Context, in *ForwardNotificationRequest, opts ...grpc.CallOption) (*ForwardNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardNotificationResponse)
	err := c.cc.Invoke(ctx, BridgrService_ForwardNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgrServiceClient) GetForwardingHistory(ctx context.Context, in *GetForwardingHistoryRequest, opts ...grpc.CallOption) (*GetForwardingHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetForwardingHistoryResponse)
	err := c.cc.Invoke(ctx, BridgrService_GetForwardingHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgrServiceServer is the server API for BridgrService service.
// All implementations must embed UnimplementedBridgrServiceServer
// for forward compatibility.
type BridgrServiceServer interface {
	// Device management
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error)
	UnregisterDevice(context.Context, *UnregisterDeviceRequest) (*UnregisterDeviceResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Configuration management
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	// Forwarding services
	ForwardSMS(context.Context, *ForwardSMSRequest) (*ForwardSMSResponse, error)
	ForwardNotification(context.Context, *ForwardNotificationRequest) (*ForwardNotificationResponse, error)
	GetForwardingHistory(context.Context, *GetForwardingHistoryRequest) (*GetForwardingHistoryResponse, error)
	mustEmbedUnimplementedBridgrServiceServer()
}

// UnimplementedBridgrServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBridgrServiceServer struct{}

func (UnimplementedBridgrServiceServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedBridgrServiceServer) UnregisterDevice(context.Context, *UnregisterDeviceRequest) (*UnregisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterDevice not implemented")
}
func (UnimplementedBridgrServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedBridgrServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedBridgrServiceServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedBridgrServiceServer) ForwardSMS(context.Context, *ForwardSMSRequest) (*ForwardSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardSMS not implemented")
}
func (UnimplementedBridgrServiceServer) ForwardNotification(context.Context, *ForwardNotificationRequest) (*ForwardNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardNotification not implemented")
}
func (UnimplementedBridgrServiceServer) GetForwardingHistory(context.Context, *GetForwardingHistoryRequest) (*GetForwardingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForwardingHistory not implemented")
}
func (UnimplementedBridgrServiceServer) mustEmbedUnimplementedBridgrServiceServer() {}
func (UnimplementedBridgrServiceServer) testEmbeddedByValue()                       {}

// UnsafeBridgrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgrServiceServer will
// result in compilation errors.
type UnsafeBridgrServiceServer interface {
	mustEmbedUnimplementedBridgrServiceServer()
}

func RegisterBridgrServiceServer(s grpc.ServiceRegistrar, srv BridgrServiceServer) {
	// If the following call pancis, it indicates UnimplementedBridgrServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BridgrService_ServiceDesc, srv)
}

func _BridgrService_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgrServiceServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgrService_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgrServiceServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgrService_UnregisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgrServiceServer).UnregisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgrService_UnregisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgrServiceServer).UnregisterDevice(ctx, req.(*UnregisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgrService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgrServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgrService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgrServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgrService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgrServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgrService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgrServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgrService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgrServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgrService_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgrServiceServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgrService_ForwardSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgrServiceServer).ForwardSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgrService_ForwardSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgrServiceServer).ForwardSMS(ctx, req.(*ForwardSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgrService_ForwardNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgrServiceServer).ForwardNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgrService_ForwardNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgrServiceServer).ForwardNotification(ctx, req.(*ForwardNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgrService_GetForwardingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForwardingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgrServiceServer).GetForwardingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgrService_GetForwardingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgrServiceServer).GetForwardingHistory(ctx, req.(*GetForwardingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BridgrService_ServiceDesc is the grpc.ServiceDesc for BridgrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BridgrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bff.bridgr.v1alpha1.BridgrService",
	HandlerType: (*BridgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _BridgrService_RegisterDevice_Handler,
		},
		{
			MethodName: "UnregisterDevice",
			Handler:    _BridgrService_UnregisterDevice_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _BridgrService_HealthCheck_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _BridgrService_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _BridgrService_UpdateConfig_Handler,
		},
		{
			MethodName: "ForwardSMS",
			Handler:    _BridgrService_ForwardSMS_Handler,
		},
		{
			MethodName: "ForwardNotification",
			Handler:    _BridgrService_ForwardNotification_Handler,
		},
		{
			MethodName: "GetForwardingHistory",
			Handler:    _BridgrService_GetForwardingHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bff/bridgr/v1alpha1/service.proto",
}
