// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bff/bridgr/health/v1alpha1/service.proto

package healthv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReportHealthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportHealthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportHealthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportHealthRequestMultiError, or nil if none found.
func (m *ReportHealthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportHealthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	// no validation rules for DeviceName

	if len(errors) > 0 {
		return ReportHealthRequestMultiError(errors)
	}

	return nil
}

// ReportHealthRequestMultiError is an error wrapping multiple validation
// errors returned by ReportHealthRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportHealthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportHealthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportHealthRequestMultiError) AllErrors() []error { return m }

// ReportHealthRequestValidationError is the validation error returned by
// ReportHealthRequest.Validate if the designated constraints aren't met.
type ReportHealthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportHealthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportHealthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportHealthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportHealthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportHealthRequestValidationError) ErrorName() string {
	return "ReportHealthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportHealthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportHealthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportHealthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportHealthRequestValidationError{}

// Validate checks the field values on ReportHealthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportHealthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportHealthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportHealthResponseMultiError, or nil if none found.
func (m *ReportHealthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportHealthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetLastSeen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportHealthResponseValidationError{
					field:  "LastSeen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportHealthResponseValidationError{
					field:  "LastSeen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastSeen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportHealthResponseValidationError{
				field:  "LastSeen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportHealthResponseMultiError(errors)
	}

	return nil
}

// ReportHealthResponseMultiError is an error wrapping multiple validation
// errors returned by ReportHealthResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportHealthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportHealthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportHealthResponseMultiError) AllErrors() []error { return m }

// ReportHealthResponseValidationError is the validation error returned by
// ReportHealthResponse.Validate if the designated constraints aren't met.
type ReportHealthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportHealthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportHealthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportHealthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportHealthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportHealthResponseValidationError) ErrorName() string {
	return "ReportHealthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportHealthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportHealthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportHealthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportHealthResponseValidationError{}

// Validate checks the field values on DeviceHealthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceHealthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceHealthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceHealthRequestMultiError, or nil if none found.
func (m *DeviceHealthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceHealthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return DeviceHealthRequestMultiError(errors)
	}

	return nil
}

// DeviceHealthRequestMultiError is an error wrapping multiple validation
// errors returned by DeviceHealthRequest.ValidateAll() if the designated
// constraints aren't met.
type DeviceHealthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceHealthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceHealthRequestMultiError) AllErrors() []error { return m }

// DeviceHealthRequestValidationError is the validation error returned by
// DeviceHealthRequest.Validate if the designated constraints aren't met.
type DeviceHealthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceHealthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceHealthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceHealthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceHealthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceHealthRequestValidationError) ErrorName() string {
	return "DeviceHealthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceHealthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceHealthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceHealthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceHealthRequestValidationError{}

// Validate checks the field values on DeviceHealthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceHealthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceHealthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceHealthResponseMultiError, or nil if none found.
func (m *DeviceHealthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceHealthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetLastSeen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceHealthResponseValidationError{
					field:  "LastSeen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceHealthResponseValidationError{
					field:  "LastSeen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastSeen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceHealthResponseValidationError{
				field:  "LastSeen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeviceHealthResponseMultiError(errors)
	}

	return nil
}

// DeviceHealthResponseMultiError is an error wrapping multiple validation
// errors returned by DeviceHealthResponse.ValidateAll() if the designated
// constraints aren't met.
type DeviceHealthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceHealthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceHealthResponseMultiError) AllErrors() []error { return m }

// DeviceHealthResponseValidationError is the validation error returned by
// DeviceHealthResponse.Validate if the designated constraints aren't met.
type DeviceHealthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceHealthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceHealthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceHealthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceHealthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceHealthResponseValidationError) ErrorName() string {
	return "DeviceHealthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceHealthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceHealthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceHealthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceHealthResponseValidationError{}
