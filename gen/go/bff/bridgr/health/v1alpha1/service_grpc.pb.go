// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bff/bridgr/health/v1alpha1/service.proto

package healthv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HealthService_ReportHealth_FullMethodName = "/bff.bridgr.health.v1alpha1.HealthService/ReportHealth"
	HealthService_DeviceHealth_FullMethodName = "/bff.bridgr.health.v1alpha1.HealthService/DeviceHealth"
)

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthServiceClient interface {
	// Devices send periodic health reports to the server
	ReportHealth(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReportHealthRequest, ReportHealthResponse], error)
	// Dashboard or backend can check health details of a specific device
	DeviceHealth(ctx context.Context, in *DeviceHealthRequest, opts ...grpc.CallOption) (*DeviceHealthResponse, error)
}

type healthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServiceClient(cc grpc.ClientConnInterface) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) ReportHealth(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReportHealthRequest, ReportHealthResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HealthService_ServiceDesc.Streams[0], HealthService_ReportHealth_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReportHealthRequest, ReportHealthResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HealthService_ReportHealthClient = grpc.BidiStreamingClient[ReportHealthRequest, ReportHealthResponse]

func (c *healthServiceClient) DeviceHealth(ctx context.Context, in *DeviceHealthRequest, opts ...grpc.CallOption) (*DeviceHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceHealthResponse)
	err := c.cc.Invoke(ctx, HealthService_DeviceHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceServer is the server API for HealthService service.
// All implementations must embed UnimplementedHealthServiceServer
// for forward compatibility.
type HealthServiceServer interface {
	// Devices send periodic health reports to the server
	ReportHealth(grpc.BidiStreamingServer[ReportHealthRequest, ReportHealthResponse]) error
	// Dashboard or backend can check health details of a specific device
	DeviceHealth(context.Context, *DeviceHealthRequest) (*DeviceHealthResponse, error)
	mustEmbedUnimplementedHealthServiceServer()
}

// UnimplementedHealthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthServiceServer struct{}

func (UnimplementedHealthServiceServer) ReportHealth(grpc.BidiStreamingServer[ReportHealthRequest, ReportHealthResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReportHealth not implemented")
}
func (UnimplementedHealthServiceServer) DeviceHealth(context.Context, *DeviceHealthRequest) (*DeviceHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceHealth not implemented")
}
func (UnimplementedHealthServiceServer) mustEmbedUnimplementedHealthServiceServer() {}
func (UnimplementedHealthServiceServer) testEmbeddedByValue()                       {}

// UnsafeHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServiceServer will
// result in compilation errors.
type UnsafeHealthServiceServer interface {
	mustEmbedUnimplementedHealthServiceServer()
}

func RegisterHealthServiceServer(s grpc.ServiceRegistrar, srv HealthServiceServer) {
	// If the following call pancis, it indicates UnimplementedHealthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthService_ServiceDesc, srv)
}

func _HealthService_ReportHealth_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthServiceServer).ReportHealth(&grpc.GenericServerStream[ReportHealthRequest, ReportHealthResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HealthService_ReportHealthServer = grpc.BidiStreamingServer[ReportHealthRequest, ReportHealthResponse]

func _HealthService_DeviceHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).DeviceHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_DeviceHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).DeviceHealth(ctx, req.(*DeviceHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthService_ServiceDesc is the grpc.ServiceDesc for HealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bff.bridgr.health.v1alpha1.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceHealth",
			Handler:    _HealthService_DeviceHealth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportHealth",
			Handler:       _HealthService_ReportHealth_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bff/bridgr/health/v1alpha1/service.proto",
}
