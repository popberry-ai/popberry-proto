// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wallet/v1alpha1/wallet.proto

package walletv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBalanceRequestMultiError, or nil if none found.
func (m *UpdateBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateBalanceRequestValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateBalanceRequestValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateBalanceRequestValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TenantId

	// no validation rules for BetAmount

	// no validation rules for WinAmount

	// no validation rules for WinloseAmount

	// no validation rules for Status

	// no validation rules for UserId

	// no validation rules for RoundId

	// no validation rules for TxnId

	// no validation rules for ParentId

	// no validation rules for GameId

	// no validation rules for GameCode

	// no validation rules for ProviderId

	// no validation rules for ProviderCode

	if len(errors) > 0 {
		return UpdateBalanceRequestMultiError(errors)
	}

	return nil
}

// UpdateBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBalanceRequestMultiError) AllErrors() []error { return m }

// UpdateBalanceRequestValidationError is the validation error returned by
// UpdateBalanceRequest.Validate if the designated constraints aren't met.
type UpdateBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBalanceRequestValidationError) ErrorName() string {
	return "UpdateBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBalanceRequestValidationError{}

// Validate checks the field values on UpdateBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBalanceResponseMultiError, or nil if none found.
func (m *UpdateBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for TransactionId

	// no validation rules for Before

	// no validation rules for Amount

	// no validation rules for After

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateBalanceResponseMultiError(errors)
	}

	return nil
}

// UpdateBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBalanceResponseMultiError) AllErrors() []error { return m }

// UpdateBalanceResponseValidationError is the validation error returned by
// UpdateBalanceResponse.Validate if the designated constraints aren't met.
type UpdateBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBalanceResponseValidationError) ErrorName() string {
	return "UpdateBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBalanceResponseValidationError{}

// Validate checks the field values on IdentifyUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdentifyUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentifyUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdentifyUserRequestMultiError, or nil if none found.
func (m *IdentifyUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentifyUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserToken

	// no validation rules for Username

	if len(errors) > 0 {
		return IdentifyUserRequestMultiError(errors)
	}

	return nil
}

// IdentifyUserRequestMultiError is an error wrapping multiple validation
// errors returned by IdentifyUserRequest.ValidateAll() if the designated
// constraints aren't met.
type IdentifyUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentifyUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentifyUserRequestMultiError) AllErrors() []error { return m }

// IdentifyUserRequestValidationError is the validation error returned by
// IdentifyUserRequest.Validate if the designated constraints aren't met.
type IdentifyUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentifyUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentifyUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentifyUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentifyUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentifyUserRequestValidationError) ErrorName() string {
	return "IdentifyUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdentifyUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentifyUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentifyUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentifyUserRequestValidationError{}

// Validate checks the field values on IdentifyUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdentifyUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentifyUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdentifyUserResponseMultiError, or nil if none found.
func (m *IdentifyUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentifyUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	// no validation rules for Message

	if len(errors) > 0 {
		return IdentifyUserResponseMultiError(errors)
	}

	return nil
}

// IdentifyUserResponseMultiError is an error wrapping multiple validation
// errors returned by IdentifyUserResponse.ValidateAll() if the designated
// constraints aren't met.
type IdentifyUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentifyUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentifyUserResponseMultiError) AllErrors() []error { return m }

// IdentifyUserResponseValidationError is the validation error returned by
// IdentifyUserResponse.Validate if the designated constraints aren't met.
type IdentifyUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentifyUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentifyUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentifyUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentifyUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentifyUserResponseValidationError) ErrorName() string {
	return "IdentifyUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IdentifyUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentifyUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentifyUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentifyUserResponseValidationError{}

// Validate checks the field values on UpdateTransactionResponseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateTransactionResponseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTransactionResponseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateTransactionResponseRequestMultiError, or nil if none found.
func (m *UpdateTransactionResponseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTransactionResponseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxnId

	// no validation rules for Response

	if len(errors) > 0 {
		return UpdateTransactionResponseRequestMultiError(errors)
	}

	return nil
}

// UpdateTransactionResponseRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateTransactionResponseRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTransactionResponseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTransactionResponseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTransactionResponseRequestMultiError) AllErrors() []error { return m }

// UpdateTransactionResponseRequestValidationError is the validation error
// returned by UpdateTransactionResponseRequest.Validate if the designated
// constraints aren't met.
type UpdateTransactionResponseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransactionResponseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransactionResponseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransactionResponseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransactionResponseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransactionResponseRequestValidationError) ErrorName() string {
	return "UpdateTransactionResponseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransactionResponseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransactionResponseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransactionResponseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransactionResponseRequestValidationError{}

// Validate checks the field values on UpdateTransactionResponseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateTransactionResponseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTransactionResponseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateTransactionResponseResponseMultiError, or nil if none found.
func (m *UpdateTransactionResponseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTransactionResponseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateTransactionResponseResponseMultiError(errors)
	}

	return nil
}

// UpdateTransactionResponseResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateTransactionResponseResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTransactionResponseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTransactionResponseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTransactionResponseResponseMultiError) AllErrors() []error { return m }

// UpdateTransactionResponseResponseValidationError is the validation error
// returned by UpdateTransactionResponseResponse.Validate if the designated
// constraints aren't met.
type UpdateTransactionResponseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransactionResponseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransactionResponseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransactionResponseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransactionResponseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransactionResponseResponseValidationError) ErrorName() string {
	return "UpdateTransactionResponseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransactionResponseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransactionResponseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransactionResponseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransactionResponseResponseValidationError{}

// Validate checks the field values on RequestResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestResponseMultiError, or nil if none found.
func (m *RequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Request

	// no validation rules for Response

	if len(errors) > 0 {
		return RequestResponseMultiError(errors)
	}

	return nil
}

// RequestResponseMultiError is an error wrapping multiple validation errors
// returned by RequestResponse.ValidateAll() if the designated constraints
// aren't met.
type RequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestResponseMultiError) AllErrors() []error { return m }

// RequestResponseValidationError is the validation error returned by
// RequestResponse.Validate if the designated constraints aren't met.
type RequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestResponseValidationError) ErrorName() string { return "RequestResponseValidationError" }

// Error satisfies the builtin error interface
func (e RequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestResponseValidationError{}
