// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/popberry-ai/popberry-proto/gen/go/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UsersServiceName is the fully-qualified name of the UsersService service.
	UsersServiceName = "user.v1.UsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UsersServiceGetUserProcedure is the fully-qualified name of the UsersService's GetUser RPC.
	UsersServiceGetUserProcedure = "/user.v1.UsersService/GetUser"
	// UsersServiceCreateUserProcedure is the fully-qualified name of the UsersService's CreateUser RPC.
	UsersServiceCreateUserProcedure = "/user.v1.UsersService/CreateUser"
	// UsersServiceUpdateUserProcedure is the fully-qualified name of the UsersService's UpdateUser RPC.
	UsersServiceUpdateUserProcedure = "/user.v1.UsersService/UpdateUser"
	// UsersServiceDeleteUserProcedure is the fully-qualified name of the UsersService's DeleteUser RPC.
	UsersServiceDeleteUserProcedure = "/user.v1.UsersService/DeleteUser"
	// UsersServiceCheckUserPasswordProcedure is the fully-qualified name of the UsersService's
	// CheckUserPassword RPC.
	UsersServiceCheckUserPasswordProcedure = "/user.v1.UsersService/CheckUserPassword"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	usersServiceServiceDescriptor                 = v1.File_user_v1_user_proto.Services().ByName("UsersService")
	usersServiceGetUserMethodDescriptor           = usersServiceServiceDescriptor.Methods().ByName("GetUser")
	usersServiceCreateUserMethodDescriptor        = usersServiceServiceDescriptor.Methods().ByName("CreateUser")
	usersServiceUpdateUserMethodDescriptor        = usersServiceServiceDescriptor.Methods().ByName("UpdateUser")
	usersServiceDeleteUserMethodDescriptor        = usersServiceServiceDescriptor.Methods().ByName("DeleteUser")
	usersServiceCheckUserPasswordMethodDescriptor = usersServiceServiceDescriptor.Methods().ByName("CheckUserPassword")
)

// UsersServiceClient is a client for the user.v1.UsersService service.
type UsersServiceClient interface {
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	CheckUserPassword(context.Context, *connect.Request[v1.CheckUserPasswordRequest]) (*connect.Response[v1.CheckUserPasswordResponse], error)
}

// NewUsersServiceClient constructs a client for the user.v1.UsersService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &usersServiceClient{
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UsersServiceGetUserProcedure,
			connect.WithSchema(usersServiceGetUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+UsersServiceCreateUserProcedure,
			connect.WithSchema(usersServiceCreateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+UsersServiceUpdateUserProcedure,
			connect.WithSchema(usersServiceUpdateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+UsersServiceDeleteUserProcedure,
			connect.WithSchema(usersServiceDeleteUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkUserPassword: connect.NewClient[v1.CheckUserPasswordRequest, v1.CheckUserPasswordResponse](
			httpClient,
			baseURL+UsersServiceCheckUserPasswordProcedure,
			connect.WithSchema(usersServiceCheckUserPasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// usersServiceClient implements UsersServiceClient.
type usersServiceClient struct {
	getUser           *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	createUser        *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	updateUser        *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	deleteUser        *connect.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
	checkUserPassword *connect.Client[v1.CheckUserPasswordRequest, v1.CheckUserPasswordResponse]
}

// GetUser calls user.v1.UsersService.GetUser.
func (c *usersServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// CreateUser calls user.v1.UsersService.CreateUser.
func (c *usersServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// UpdateUser calls user.v1.UsersService.UpdateUser.
func (c *usersServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls user.v1.UsersService.DeleteUser.
func (c *usersServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// CheckUserPassword calls user.v1.UsersService.CheckUserPassword.
func (c *usersServiceClient) CheckUserPassword(ctx context.Context, req *connect.Request[v1.CheckUserPasswordRequest]) (*connect.Response[v1.CheckUserPasswordResponse], error) {
	return c.checkUserPassword.CallUnary(ctx, req)
}

// UsersServiceHandler is an implementation of the user.v1.UsersService service.
type UsersServiceHandler interface {
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	CheckUserPassword(context.Context, *connect.Request[v1.CheckUserPasswordRequest]) (*connect.Response[v1.CheckUserPasswordResponse], error)
}

// NewUsersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsersServiceHandler(svc UsersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	usersServiceGetUserHandler := connect.NewUnaryHandler(
		UsersServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(usersServiceGetUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceCreateUserHandler := connect.NewUnaryHandler(
		UsersServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(usersServiceCreateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceUpdateUserHandler := connect.NewUnaryHandler(
		UsersServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(usersServiceUpdateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceDeleteUserHandler := connect.NewUnaryHandler(
		UsersServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(usersServiceDeleteUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceCheckUserPasswordHandler := connect.NewUnaryHandler(
		UsersServiceCheckUserPasswordProcedure,
		svc.CheckUserPassword,
		connect.WithSchema(usersServiceCheckUserPasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.v1.UsersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UsersServiceGetUserProcedure:
			usersServiceGetUserHandler.ServeHTTP(w, r)
		case UsersServiceCreateUserProcedure:
			usersServiceCreateUserHandler.ServeHTTP(w, r)
		case UsersServiceUpdateUserProcedure:
			usersServiceUpdateUserHandler.ServeHTTP(w, r)
		case UsersServiceDeleteUserProcedure:
			usersServiceDeleteUserHandler.ServeHTTP(w, r)
		case UsersServiceCheckUserPasswordProcedure:
			usersServiceCheckUserPasswordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsersServiceHandler struct{}

func (UnimplementedUsersServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UsersService.GetUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UsersService.CreateUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UsersService.UpdateUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UsersService.DeleteUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) CheckUserPassword(context.Context, *connect.Request[v1.CheckUserPasswordRequest]) (*connect.Response[v1.CheckUserPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UsersService.CheckUserPassword is not implemented"))
}
