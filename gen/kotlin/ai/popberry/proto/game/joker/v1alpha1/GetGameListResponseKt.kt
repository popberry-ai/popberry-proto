// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: game/joker/v1alpha1/joker.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ai.popberry.proto.game.joker.v1alpha1;

@kotlin.jvm.JvmName("-initializegetGameListResponse")
public inline fun getGameListResponse(block: ai.popberry.proto.game.joker.v1alpha1.GetGameListResponseKt.Dsl.() -> kotlin.Unit): ai.popberry.proto.game.joker.v1alpha1.GetGameListResponse =
  ai.popberry.proto.game.joker.v1alpha1.GetGameListResponseKt.Dsl._create(ai.popberry.proto.game.joker.v1alpha1.GetGameListResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `game.joker.v1alpha1.GetGameListResponse`
 */
public object GetGameListResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ai.popberry.proto.game.joker.v1alpha1.GetGameListResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: ai.popberry.proto.game.joker.v1alpha1.GetGameListResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): ai.popberry.proto.game.joker.v1alpha1.GetGameListResponse = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class GamesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .game.v1alpha1.Game games = 1 [json_name = "games"];`
     */
     public val games: com.google.protobuf.kotlin.DslList<ai.popberry.proto.game.v1alpha1.Game, GamesProxy>
      @kotlin.jvm.JvmSynthetic
  get() = com.google.protobuf.kotlin.DslList(
        _builder.gamesList
      )
    /**
     * <code>repeated .game.v1alpha1.Game games = 1 [json_name = "games"];</code>
     * @param value The games to add.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addGames")
    public fun com.google.protobuf.kotlin.DslList<ai.popberry.proto.game.v1alpha1.Game, GamesProxy>.add(value: ai.popberry.proto.game.v1alpha1.Game) {
      _builder.addGames(value)
    }
    /**
     * <code>repeated .game.v1alpha1.Game games = 1 [json_name = "games"];</code>
     * @param value The games to add.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignGames")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<ai.popberry.proto.game.v1alpha1.Game, GamesProxy>.plusAssign(value: ai.popberry.proto.game.v1alpha1.Game) {
      add(value)
    }
    /**
     * <code>repeated .game.v1alpha1.Game games = 1 [json_name = "games"];</code>
     * @param values The games to add.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addAllGames")
    public fun com.google.protobuf.kotlin.DslList<ai.popberry.proto.game.v1alpha1.Game, GamesProxy>.addAll(values: kotlin.collections.Iterable<ai.popberry.proto.game.v1alpha1.Game>) {
      _builder.addAllGames(values)
    }
    /**
     * <code>repeated .game.v1alpha1.Game games = 1 [json_name = "games"];</code>
     * @param values The games to add.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignAllGames")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<ai.popberry.proto.game.v1alpha1.Game, GamesProxy>.plusAssign(values: kotlin.collections.Iterable<ai.popberry.proto.game.v1alpha1.Game>) {
      addAll(values)
    }
    /**
     * <code>repeated .game.v1alpha1.Game games = 1 [json_name = "games"];</code>
     * @param index The index to set the value at.
     * @param value The games to set.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setGames")
    public operator fun com.google.protobuf.kotlin.DslList<ai.popberry.proto.game.v1alpha1.Game, GamesProxy>.set(index: kotlin.Int, value: ai.popberry.proto.game.v1alpha1.Game) {
      _builder.setGames(index, value)
    }
    /**
     * <code>repeated .game.v1alpha1.Game games = 1 [json_name = "games"];</code>
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("clearGames")
    public fun com.google.protobuf.kotlin.DslList<ai.popberry.proto.game.v1alpha1.Game, GamesProxy>.clear() {
      _builder.clearGames()
    }

    /**
     * `string next_page_token = 2 [json_name = "nextPageToken"];`
     */
    public var nextPageToken: kotlin.String
      @kotlin.jvm.JvmName("getNextPageToken")
        get() = _builder.nextPageToken
      @kotlin.jvm.JvmName("setNextPageToken")
        set(value) {
        _builder.nextPageToken = value
      }
    /**
     * <code>string next_page_token = 2 [json_name = "nextPageToken"];</code>
     * @return This builder for chaining.
     */
    public fun clearNextPageToken() {
      _builder.clearNextPageToken()
    }

    /**
     * `int32 total_size = 3 [json_name = "totalSize"];`
     */
    public var totalSize: kotlin.Int
      @kotlin.jvm.JvmName("getTotalSize")
        get() = _builder.totalSize
      @kotlin.jvm.JvmName("setTotalSize")
        set(value) {
        _builder.totalSize = value
      }
    /**
     * <code>int32 total_size = 3 [json_name = "totalSize"];</code>
     * @return This builder for chaining.
     */
    public fun clearTotalSize() {
      _builder.clearTotalSize()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ai.popberry.proto.game.joker.v1alpha1.GetGameListResponse.copy(block: `ai.popberry.proto.game.joker.v1alpha1`.GetGameListResponseKt.Dsl.() -> kotlin.Unit): ai.popberry.proto.game.joker.v1alpha1.GetGameListResponse =
  `ai.popberry.proto.game.joker.v1alpha1`.GetGameListResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

