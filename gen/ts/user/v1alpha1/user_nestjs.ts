// @generated by protoc-gen-nestjs v0.2.0 with parameter "target=ts"
// @generated from file user/v1alpha1/user.proto (package user.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CheckUserPasswordRequest, CheckUserPasswordResponse, CreateUserRequest, CreateUserResponse, DeleteUserRequest, DeleteUserResponse, GetUserRequest, GetUserResponse, UpdateUserRequest, UpdateUserResponse } from "./user_pb.js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";

/**
 * @generated from service user.v1alpha1.UsersService
 */
export interface UsersServiceController {
  /**
   * @generated from rpc user.v1alpha1.UsersService.GetUser
   */
  getUser(request: GetUserRequest): Promise<GetUserResponse>;

  /**
   * @generated from rpc user.v1alpha1.UsersService.CreateUser
   */
  createUser(request: CreateUserRequest): Promise<CreateUserResponse>;

  /**
   * @generated from rpc user.v1alpha1.UsersService.UpdateUser
   */
  updateUser(request: UpdateUserRequest): Promise<UpdateUserResponse>;

  /**
   * @generated from rpc user.v1alpha1.UsersService.DeleteUser
   */
  deleteUser(request: DeleteUserRequest): Promise<DeleteUserResponse>;

  /**
   * @generated from rpc user.v1alpha1.UsersService.CheckUserPassword
   */
  checkUserPassword(request: CheckUserPasswordRequest): Promise<CheckUserPasswordResponse>;
}

export function UsersServiceMethods() {
  return function (constructor: Function) {
    for (const method of ["getUser", "createUser", "updateUser", "deleteUser", "checkUserPassword"]) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    for (const method of []) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}
