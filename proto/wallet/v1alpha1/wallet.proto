syntax = "proto3";

package wallet.v1alpha1;

option go_package = "wallet/v1alpha1";

service WalletService {
  // UpdateBalance processes a transaction and updates the wallet balance accordingly
  // It handles bet placement, win calculation, and transaction recording
  rpc UpdateBalance(UpdateBalanceRequest) returns (UpdateBalanceResponse);

  // IdentifyUser verifies if a user exists in the system using one or more
  // identification methods (user_id, user_token, or username)
  rpc IdentifyUser(IdentifyUserRequest) returns (IdentifyUserResponse);

  // UpdateTransactionResponse updates the transaction record with additional response
  // data after processing by external services
  rpc UpdateTransactionResponse(UpdateTransactionResponseRequest) returns (UpdateTransactionResponseResponse);

  // GetTransaction retrieves the details of a specific transaction
  rpc GetTransaction(GetTransactionRequest) returns (stream GetTransactionResponse);
}

// UpdateBalanceRequest contains all information necessary to process a wallet transaction
message UpdateBalanceRequest {
  // Collection of raw request/response data related to this transaction
  repeated RequestResponse requests = 1;

  // Unique identifier for the tenant (multi-tenancy support)
  string tenant_id = 2;

  // Amount wagered by the user
  double bet_amount = 3;

  // Amount won by the user (if applicable)
  double win_amount = 4;

  // Net amount (win_amount - bet_amount)
  double winlose_amount = 5;

  // Current status of the transaction (e.g., "pending", "completed", "failed")
  string status = 6;

  // Unique identifier for the user
  string user_id = 7;

  // Identifier for the game round this transaction belongs to
  string round_id = 8;

  // Unique identifier for this transaction
  string txn_id = 9;

  // Reference to a parent transaction (for multi-part transactions)
  string parent_id = 10;

  // Numeric identifier for the game
  int32 game_id = 11;

  // String identifier for the game
  string game_code = 12;

  // Numeric identifier for the provider
  int32 provider_id = 13;

  // String identifier for the provider
  string provider_code = 14;

  // Total amount of bets placed (used for bonus/promotion calculations)
  double turnover = 15;
}

// UpdateBalanceResponse provides the result of a balance update operation
message UpdateBalanceResponse {
  // Whether the transaction was processed successfully
  bool success = 1;

  // Unique identifier for the created transaction (typically a MongoDB ObjectId)
  string transaction_id = 2;

  // User's balance before the transaction was applied
  double before = 3;

  // The transaction amount (positive for credits, negative for debits)
  double amount = 4;

  // User's balance after the transaction was applied
  double after = 5;

  // Descriptive message providing additional context about the operation
  string message = 6;
}

// IdentifyUserRequest provides multiple ways to identify a user
// At least one field must be specified
message IdentifyUserRequest {
  // Primary user identifier
  string user_id = 1;

  // Authentication token for the user
  string user_token = 2;

  // User's login name
  string username = 3;
}

// IdentifyUserResponse indicates whether the user exists and provides
// additional context
message IdentifyUserResponse {
  // Whether the user was found in the system
  bool exists = 1;

  // Additional information about the lookup result
  string message = 2;
}

// UpdateTransactionResponseRequest specifies a transaction to update
// and the new response data to associate with it
message UpdateTransactionResponseRequest {
  // Identifier of the transaction to update
  string txn_id = 1;

  // New response data (typically JSON formatted)
  string response = 2;
}

// UpdateTransactionResponseResponse indicates the result of updating
// transaction response data
message UpdateTransactionResponseResponse {
  // Whether the update operation was successful
  bool success = 1;

  // Additional information about the operation result
  string message = 2;
}

// RequestResponse captures raw request and response data for audit
// and debugging purposes
message RequestResponse {
  // Raw request data (typically JSON formatted)
  string request = 1;

  // Raw response data (typically JSON formatted)
  string response = 2;
}

// GetTransactionRequest specifies the transaction to retrieve
message GetTransactionRequest {
  // Unique identifier for the tenant (multi-tenancy support)
  string tenant_id = 1;

  // Unique identifier for the user
  string user_id = 2;

  // Unique identifier for the transaction
  string round_id = 3;

  // Unique identifier for the transaction
  string txn_id = 4;

  // Unique identifier for the game
  string game_id = 5;
}

// GetTransactionResponse provides the details of a transaction
message GetTransactionResponse {
  // Unique identifier for the transaction
  string txn_id = 1;

  // Transaction status (e.g., "pending", "completed", "failed")
  string status = 2;

  // Amount wagered by the user
  double bet_amount = 3;

  // Amount won by the user (if applicable)
  double win_amount = 4;

  // Net amount (win_amount - bet_amount)
  double winlose_amount = 5;

  // Unique identifier for the user
  string user_id = 6;

  // Identifier for the game round this transaction belongs to
  string round_id = 7;

  // Numeric identifier for the game
  int32 game_id = 8;

  // String identifier for the game
  string game_code = 9;

  // Numeric identifier for the provider
  int32 provider_id = 10;

  // String identifier for the provider
  string provider_code = 11;

  // Total amount of bets placed (used for bonus/promotion calculations)
  double turnover = 12;
}
